(ns arcadia.packages
  (:require [clojure.string :as string])
  (:import XmlReader
           System.IO.StringReader))

(def pom "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
         <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">
         <modelVersion>4.0.0</modelVersion>
         <groupId>fipp</groupId>
         <artifactId>fipp</artifactId>
         <packaging>jar</packaging>
         <version>0.5.1</version>
         <name>fipp</name>
         <description>Fast Idiomatic Pretty Printer for Clojure</description>
         <url>https://github.com/brandonbloom/fipp</url>
         <licenses>
         <license>
         <name>Eclipse Public License</name>
         <url>http://www.eclipse.org/legal/epl-v10.html</url>
         </license>
         </licenses>
         <scm>
         <tag>e360c29c02167ac9fd3252fad6e208ddcea50ecb
         </tag>
         <url/>
         </scm>
         <build>
         <sourceDirectory>src</sourceDirectory>
         <testSourceDirectory>test</testSourceDirectory>
         <resources>
         <resource>
         <directory>resources</directory>
         </resource>
         </resources>
         <testResources>
         <testResource>
         <directory>dev-resources</directory>
         </testResource>
         <testResource>
         <directory>resources</directory>
         </testResource>
         </testResources>
         <directory>target</directory>
         <outputDirectory>target/classes</outputDirectory>
         <plugins/>
         </build>
         <repositories>
         <repository>
         <id>central</id>
         <url>https://repo1.maven.org/maven2/</url>
         <snapshots>
         <enabled>false</enabled>
         </snapshots>
         <releases>
         <enabled>true</enabled>
         </releases>
         </repository>
         <repository>
         <id>clojars</id>
         <url>https://clojars.org/repo/</url>
         <snapshots>
         <enabled>true</enabled>
         </snapshots>
         <releases>
         <enabled>true</enabled>
         </releases>
         </repository>
         </repositories>
         <dependencies>
         <dependency>
         <groupId>org.clojure</groupId>
         <artifactId>clojure</artifactId>
         <version>1.6.0</version>
         </dependency>
         <dependency>
         <groupId>org.clojure</groupId>
         <artifactId>data.finger-tree</artifactId>
         <version>0.0.2</version>
         </dependency>
         <dependency>
         <groupId>transduce</groupId>
         <artifactId>transduce</artifactId>
         <version>0.1.0</version>
         </dependency>
         <dependency>
         <groupId>org.clojure</groupId>
         <artifactId>tools.nrepl</artifactId>
         <version>0.2.6</version>
         <exclusions>
         <exclusion>
         <groupId>org.clojure</groupId>
         <artifactId>clojure</artifactId>
         </exclusion>
         </exclusions>
         <scope>test</scope>
         </dependency>
         <dependency>
         <groupId>clojure-complete</groupId>
         <artifactId>clojure-complete</artifactId>
         <version>0.2.3</version>
         <exclusions>
         <exclusion>
         <groupId>org.clojure</groupId>
         <artifactId>clojure</artifactId>
         </exclusion>
         </exclusions>
         <scope>test</scope>
         </dependency>
         </dependencies>
         </project>
         
         <!-- This file was autogenerated by Leiningen.
         Please do not edit it directly; instead edit project.clj and regenerate it.
         It should not be considered canonical data. For more information see
         https://github.com/technomancy/leiningen -->")

(def url-prefix
  "http://search.maven.org/remotecontent?filepath="
  ; "https://clojars.org/repo/"
  )

(defn url-fragment [[id version]]
  (let [artifact (name id)
        group (or (namespace id)
                  artifact)
        group (string/replace group "." "/")]
    (str group "/"
         artifact "/"
         version "/"
         artifact "-"
         version)))

(defn pom-url [spec]
  (str url-prefix (url-fragment spec) ".pom"))

(defn jar-url [spec]
  (str url-prefix (url-fragment spec) ".jar"))

; https://clojars.org/repo/fipp/fipp/0.5.1/fipp-0.5.1.pom

(pom-url '[fipp "0.5.1"])

(defmulti xml-content (fn [^XmlReader xml] (.NodeType xml)))
(defmethod xml-content
  :default [^XmlReader xml]
  nil)

(defmethod xml-content
  XmlNodeType/Text [^XmlReader xml]
  (string/trim (.Value xml)))

(defmethod xml-content
  XmlNodeType/Element [^XmlReader xml]
  (keyword (.Name xml)))

(defn read-xml-from-reader [^XmlReader xml]
  (loop [accumulator []]
    (let [depth (.Depth xml)]
      (.Read xml)
      (cond (or (.EOF xml)
                (= (.NodeType xml)
                   XmlNodeType/EndElement)) (seq (filter identity accumulator))
            (.IsEmptyElement xml) (recur accumulator)
            :else (if (> (.Depth xml)
                         depth)
                    (recur (conj accumulator
                                 (xml-content xml)
                                 (read-xml-from-reader xml)))
                    (recur (conj accumulator
                                 (xml-content xml))))))))

(defn read-xml [source]
  (read-xml-from-reader (XmlReader/Create (StringReader. source))))

(def flatten-set #{:licenses :dependencies :exclusions :resources :testResources :repositories})

(defn make-map [stream]
  (if (seq? stream)
    (reduce (fn [acc [k v]]
              (assoc acc k (if (flatten-set k)
                             (mapv make-map (take-nth 2 (drop 1 v)))
                             (make-map v))))
            {}
            (partition 2 stream))
    stream))

; (make-map (read-xml pom)) 
(->> (make-map (read-xml pom))
     :project
     :dependencies
     (map (fn [{:keys [version artifactId groupId]}]
            (jar-url [(symbol (str groupId "/" artifactId)) version]))))

(.. (WebClient.) (DownloadFile "http://search.maven.org/remotecontent?filepath=org/clojure/data.finger-tree/0.0.2/data.finger-tree-0.0.2.jar"
                             "foo.jar"))